@model PatrolInspect.Models.LoginViewModel

@{
    ViewData["Title"] = "巡檢系統";
    Layout = "_Layout";
}

@section css {
    <style>
        .header {
            padding: 10px;
            border: 1px solid #ccc;
            margin-bottom: 10px;
            background: #f5f5f5;
            display: flex;
            justify-content:space-between
        }

        .current-time {
            font-size:12px;
            font-weight: bold;
            color: #666;
        }

        .section {
            border: 1px solid #ccc;
            margin-bottom: 10px;
            background: #fff;
        }

        .section-title {
            background: #e0e0e0;
            padding: 8px 10px;
            margin: 0;
            font-weight: bold;
            border-bottom: 1px solid #ccc;
            font-size:16px;
        }

        .section-content {
            padding: 10px;
        }

        .stats-grid {
            display: flex;
            gap: 8px;
            margin-bottom: 10px;
        }

        .stat-box {
            flex:1;
            text-align: center;
            padding: 8px;
            border: 1px solid #ddd;
            background: #f9f9f9;
        }

        .stat-number {
            font-weight: bold;
            margin-bottom: 3px;
        }

        .stat-label {
            color: #666;
        }

        /* .control-buttons {
            margin-bottom: 10px;
        } */

            .control-buttons button {
                padding: 6px 10px;
                margin-right: 5px;
                margin-bottom: 5px;
                border: 1px solid #ccc;
                background: #f0f0f0;
                cursor: pointer;
            }

                .control-buttons button:hover {
                    background: #e0e0e0;
                }

        .nfc-status {
            padding: 8px;
            margin: 8px 0;
            border: 1px solid #ccc;
            display: none;
        }

        .nfc-success {
            background: #d4edda;
            border-color: #c3e6cb;
        }

        .nfc-error {
            background: #f8d7da;
            border-color: #f5c6cb;
        }

        .nfc-warning {
            background: #fff3cd;
            border-color: #ffeaa7;
        }

        .nfc-info {
            background: #d1ecf1;
            border-color: #bee5eb;
        }

        .nfc-log {
            background: #f8f8f8;
            border: 1px solid #ccc;
            padding: 8px;
            height: 120px;
            overflow-y: auto;
            font-family: monospace;
        }

        .log-entry {
            margin-bottom: 2px;
            word-break: break-all;
        }

        /* 時段 Accordion 樣式 */
        .time-periods {
            margin-bottom: 10px;
        }

        .time-period {
            border: 1px solid #ddd;
            margin-bottom: 3px;
            background: #fff;
        }

            .time-period.inactive {
                background: #f8f8f8;
                opacity: 0.7;
            }

            .time-period.current {
                border: 2px solid #0071b2;
                background: #f8fff8;
            }

        .period-header {
            padding: 10px;
            cursor: pointer;
            border-bottom: 1px solid #ddd;
            display: flex;
            justify-content: space-between;
            align-items: center;

        }

            .period-header:hover {
                background: #f0f0f0;
            }

        .period-time {
            font-weight: bold;
        }

        .period-areas {
            color: #666;
        }

        .period-status {
            padding: 2px 6px;
            border-radius: 3px;
        }

        .status-current {
            background: #28a745;
            color: white;
        }

        .status-upcoming {
            background: #ffc107;
            color: black;
        }

        .status-completed {
            background: #6c757d;
            color: white;
        }

        .accordion-icon {
            transition: transform 0.3s ease;
        }

            .accordion-icon.expanded {
                transform: rotate(180deg);
            }

        .period-content {
            display: none;
            padding: 10px;
            background: #fff;
        }

            .period-content.expanded {
                display: block;
            }

        .period-info {
            background: #f0f8ff;
            border: 1px solid #ccc;
            padding: 8px;
            margin-bottom: 10px;
        }

        .device-card {
            border: 1px solid #ddd;
            margin-bottom: 8px;
            padding: 8px;
            background: #fff;
        }

            .device-card.needs-inspection {
                border-left: 3px solid #dc3545;
                background: #ffeeee;
            }

            .device-card.completed {
                border-left: 3px solid #28a745;
                background: #eeffee;
            }

            .device-card.not-running {
                border-left: 3px solid #6c757d;
                background: #f5f5f5;
                color: #666;
            }

        .device-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 5px;
        }

        .device-id {
            font-weight: bold;
        }

        .device-status {
            padding: 2px 6px;
            border-radius: 3px;
            font-weight: bold;
        }

        .status-run {
            background: #d3ffd3;
  
        }

        .status-idle {
            background: #fffbce;
  
        }

        .status-alarm {
            background: #eedadb;
   
        }

        .status-inspecting {
            background: #e2efd9;

        }

        .status-overtime {
            background: #f7cbac;

        }

        .status-off {
            background: #e4e4e4;

        }

        .device-name {
            color: #777;
            margin-bottom: 4px;
        }

        .device-info {
            color: #666;
            margin-bottom: 2px;
        }

        .inspection-badge {
            display: inline-block;
            padding: 3px 6px;
            border-radius: 3px;
            font-weight: bold;
            margin-top: 5px;
        }

        .needs-inspection-badge {
            background: #dc3545;
            color: white;
        }

        .completed-badge {
            background: #28a745;
            color: white;
        }

        .not-required-badge {
            background: #e9ecef;
            color: #6c757d;
        }

        .no-devices {
            text-align: center;
            padding: 20px;
            color: #666;

        }

        .loading {
            text-align: center;
            padding: 20px;
            display: none;

        }

        .error {
            color: red;
            padding: 10px;
            background: #ffe8e8;
            border: 1px solid red;
            display: none;
        }

        /* Modal 樣式 */
        .modal {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.5);
            display: none;
            justify-content: center;
            align-items: center;
            z-index: 9999;
        }

        .modal-content {
            background: white;
            padding: 20px;
            border: 2px solid #333;
            max-width: 300px;
            text-align: center;
            margin: 10px;
        }

            .modal-content h3 {
                margin-bottom: 10px;
                color: #333;

            }

            .modal-content p {
                margin-bottom: 8px;

            }

            .modal-content button {
                padding: 8px 15px;
                background: #333;
                color: white;
                border: none;
                cursor: pointer;
                margin-top: 10px;
            }


        .modal {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.5);
            display: none; /* 預設隱藏 */
            justify-content: center;
            align-items: center;
            z-index: 9999;
        }

            .modal.show {
                display: flex; /* 顯示時置中 */
            }

        .modal-content {
            background: white;
            padding: 20px;
            border: 2px solid #333;
            border-radius: 8px;
            max-width: 300px;
            width: 90%;
            text-align: center;
        }

    </style>
}

<div class="container">
    <!-- 使用者資訊 -->
    <div class="header">
        <div class="">
            <strong>@ViewBag.UserName (@ViewBag.UserNo)</strong>
            <div style="color: #666;" onclick="showNFCTestModal('@ViewBag.UserNo')">@ViewBag.DepartmentName - @ViewBag.TitleName</div>
            <div class="current-time" id="currentTime">@ViewBag.CurrentTime</div>
        </div>
        <div class="control-buttons">
            <button onclick="loadTodayInspection()">刷新資料</button>
        </div>
    </div>

    <!-- 統計資訊 -->
    <div class="section">
        @* <h3 class="section-title">目前時段統計</h3> *@
        <div class="section-content">
            <div class="d-flex flex-wrap  gap-2">
                <div class="d-flex gap-2 align-items-center">
                    <div style="height:20px; width:20px; border-radius:100%" class="status-run"></div><span style="font-size:12px">機台 RUN</span>
                </div>
                <div class="d-flex gap-2 align-items-center">
                    <div style="height:20px; width:20px; border-radius:100%" class="status-idle"></div><span style="font-size:12px">機台 IDLE</span>
                </div>
                <div class="d-flex gap-2 align-items-center">
                    <div style="height:20px; width:20px; border-radius:100%" class="status-off"></div><span style="font-size:12px">機台 OFF</span>
                </div>
                <div class="d-flex gap-2 align-items-center">
                    <div style="height:20px; width:20px; border-radius:100%" class="status-alarm"></div><span style="font-size:12px">機台 ALARM</span>
                </div>
                <div class="d-flex gap-2 align-items-center">
                    <div style="height:20px; width:20px; border-radius:100%" class="status-overtime"></div><span style="font-size:12px">距上次檢測超過2小時</span>
                </div>
            </div>
        </div>
    </div>

    <!-- 載入/錯誤狀態 -->
    <div id="loading" class="loading">載入中...</div>
    <div id="error" class="error"></div>

    <!-- 時段排程 Accordion -->
    <div id="timePeriodsSection" class="section" style="display: block;">
        <h3 class="section-title">今日排程</h3>
        <div class="section-content">
            <div id="timePeriods" class="time-periods"></div>
        </div>
    </div>

    <!-- NFC 感應 -->
    <div class="section">
        <h3 class="section-title">NFC 感應</h3>
        <div class="section-content">
            <div id="nfcStatus" class="nfc-status"></div>
            <div style="margin-bottom: 8px;" class="control-buttons">
                <button onclick="manualStartNFC()">啟動感應</button>
                <button onclick="stopNFC()">停止感應</button>
                @* <button onclick="clearNFCLog()">清除日誌</button> *@
            </div>
            <div id="nfcLog" class="nfc-log"></div> 
        </div>
    </div>

    <!-- 檢驗開始提示 -->
    <div id="inspectionModal" class="modal" onclick="closeInspectionModal(event)">
        <div class="modal-content" onclick="event.stopPropagation()">
            <h3>檢驗開始</h3>
            <p><strong id="modalDevice">-</strong></p>
            <p id="modalTime">-</p>
            <p>請在機邊電腦完成資料上傳</p>
            @* <p style="color: #666;">
            <span id="countdown">10</span> 秒後自動關閉
        </p> *@
            <button onclick="closeInspectionModal()">確定</button>
        </div>
    </div>
</div>
<div id="nfcTestModal" style="display: none; position: fixed; top: 0; left: 0; width: 100%; height: 100%;
     background: rgba(0,0,0,0.5); z-index: 1000; align-items: center; justify-content: center;">
    <div style="background: white; padding: 30px; border-radius: 8px; max-width: 500px; width: 90%; max-height: 80%; overflow-y: auto;">
        <h3 style="margin-bottom: 20px; color: #333;">選擇測試 NFC 卡片</h3>

        <div style="margin-bottom: 20px;">
            <input type="text" id="nfcSearchInput" placeholder="搜尋區域或卡片..."
                   style="width: 100%; padding: 8px; border: 1px solid #ddd; border-radius: 4px;"
                   onkeyup="filterNFCCards()">
        </div>

        <div id="nfcCardList" style="max-height: 300px; overflow-y: auto; border: 1px solid #eee; border-radius: 4px;">
            <!-- 動態生成的卡片列表 -->
        </div>

        <div style="text-align: right; margin-top: 20px;">
            <button onclick="closeNFCTestModal()"
                    style="padding: 8px 15px; background: #666; color: white; border: none; border-radius: 4px; margin-right: 10px;">
                取消
            </button>
            <button onclick="testCustomNFC()"
                    style="padding: 8px 15px; background: #007bff; color: white; border: none; border-radius: 4px;">
                自訂卡片ID
            </button>
        </div>
    </div>
</div>
<!-- 自訂 NFC ID Modal -->
<div id="customNFCModal" style="display: none; position: fixed; top: 0; left: 0; width: 100%; height: 100%;
     background: rgba(0,0,0,0.5); z-index: 1001; align-items: center; justify-content: center;">
    <div style="background: white; padding: 30px; border-radius: 8px; max-width: 400px; width: 90%;">
        <h3 style="margin-bottom: 20px; color: #333;">輸入自訂 NFC ID</h3>

        <input type="text" id="customNFCInput" placeholder="輸入 NFC 卡片 ID..."
               style="width: 100%; padding: 10px; border: 1px solid #ddd; border-radius: 4px; margin-bottom: 20px;">

        <div style="text-align: right;">
            <button onclick="closeCustomNFCModal()"
                    style="padding: 8px 15px; background: #666; color: white; border: none; border-radius: 4px; margin-right: 10px;">
                取消
            </button>
            <button onclick="executeCustomNFC()"
                    style="padding: 8px 15px; background: #28a745; color: white; border: none; border-radius: 4px;">
                測試
            </button>
        </div>
    </div>
</div>


@section scripts {
    <script>
        let inspectionData = null;
        let nfcReader = null;
        let isNFCSupported = false;
        let timePeriodsData = [];

        $(document).ready(function() {
            updateCurrentTime();
            setInterval(updateCurrentTime, 1000);
            initializeNFC();
            loadTodayInspection();

        });


        function updateCurrentTime() {
            const now = new Date();
            $('#currentTime').text(now.toLocaleString('zh-TW').replace(/\//g, '-'));
        }

        function loadTodayInspection() {
            showLoading(true);
            hideError();

            $.ajax({
                url: '@Url.Action("GetTodayInspection", "Inspection")',
                type: 'GET',
                dataType: 'json',
                success: function (response) {
                    showLoading(false);
                    if (response.success) {
                        displayTimePeriodsData(response.data);
                    } else {
                        showError(response.message || '載入失敗');
                    }
                },
                error: function (xhr, status, error) {
                    showLoading(false);
                    let errorMessage = '載入失敗';
                    if (xhr.status === 401) {
                        errorMessage = '登入已過期，請重新登入';
                        setTimeout(() => window.location.href = '@Url.Action("Login", "Account")', 2000);
                    }
                    showError(errorMessage);
                }
            });
        }

        function displayTimePeriodsData(data) {

            // 處理時段資料
            if (data.timePeriods && data.timePeriods.length > 0) {
                renderTimePeriods(data.timePeriods);
                $('#timePeriodsSection').show();
            } else {
                $('#timePeriodsSection').hide();
                addNFCLog("無時段資料");
            }
        }

        function renderTimePeriods(periods) {
            const container = $('#timePeriods');
            container.empty();

            periods.forEach((period, index) => {
                const periodElement = createPeriodElement(period, index);
                container.append(periodElement);
            });
        }

        function createPeriodElement(period, index) {
            const periodClass = period.isCurrent ? 'current' : 'inactive';  //curent有藍色邊框
            const statusClass = period.isCurrent ? 'status-current' : 
                               (period.isPast ? 'status-completed' : 'status-upcoming');
            const statusText = period.isCurrent ? '進行中' :
                              (period.isPast ? '已結束' : '');

            const areasText = period.areas ? period.areas.join(', ') : '未設定區域';

            const periodElement = $(`
                <div class="time-period ${periodClass}" data-period="${index}">
                    <div class="period-header" onclick="togglePeriod(${index})">
                        <div>
                            <div class="period-time">${period.startTime} - ${period.endTime}</div>
                            <div class="period-areas">${areasText}</div>
                        </div>
                        <div>
                            <span class="period-status ${!!statusText && statusClass}">${statusText}</span>
                            <span class="accordion-icon">▼</span>
                        </div>
                    </div>
                    <div class="period-content" id="period-content-${index}">
                        ${createPeriodContentHtml(period)}
                    </div>
                </div>
            `);

            // 如果是當前時段，自動展開
            if (period.isCurrent) {
                periodElement.find('.period-content').addClass('expanded');
                periodElement.find('.accordion-icon').addClass('expanded');
            }

            return periodElement;
        }

        function createPeriodContentHtml(period) {
            let contentHtml = `
                <div class="period-info">
                    <strong>${period.eventType || '排程作業'}</strong>
                    ${period.eventDetail ? `<div>${period.eventDetail}</div>` : ''}
                </div>
            `;

            // 主要機台
            let devices = [...(period.devicesToInspect || [])];
            // 額外任務 (不排序，最後顯示)
            let extraTasks = (period.isCurrent && period.extraTask) ? period.extraTask : [];

            if (devices.length > 0 || extraTasks.length > 0) {
                // 狀態優先順序
                const statusPriority = {
                    'RUN': 1,
                    'IDLE': 2,
                    'ALARM': 3,
                    'PMC資料缺漏': 4,
                    'OFF': 5
                };
           
                // 排序主要機台
                const sortedDevices = devices.sort((a, b) => {
                    const statusA = a.deviceStatus?.status || 'PMC資料缺漏';
                    const statusB = b.deviceStatus?.status || 'PMC資料缺漏';
                    const priorityA = statusPriority[statusA] || 99;
                    const priorityB = statusPriority[statusB] || 99;
                    if (priorityA === priorityB) {
                        return a.deviceStatus.deviceID.localeCompare(b.deviceStatus.deviceID);
                    }
                    return priorityA - priorityB;
                });

                // --- 渲染主要機台 ---
                sortedDevices.forEach(item => {
                    contentHtml += renderDeviceCard(item, period);
                });

                // --- 渲染額外任務 (放在最後) ---
                extraTasks.forEach(extra => {
                    contentHtml += renderDeviceCard(
                        { ...extra, isExtraTask: true }, // 加上標記
                        period
                    );
                });

            } else {
                contentHtml += '<div class="no-devices">此時段無機台資料</div>';
            }

            return contentHtml;
        }

        function renderDeviceCard(item, period) {
            const device = item.deviceStatus;
            const status = device.status || 'PMC資料缺漏';
            const workOrderNo = device?.wO_ID ? device.wO_ID : "-";

            // 狀態樣式
            let cardClass = '';
            if (status === "OFF" || period.isPast) cardClass = 'status-off';
            if (status === "RUN" || period.isPast) cardClass = 'status-run';
            if (status === "IDLE" || period.isPast) cardClass = 'status-idle';
            if (status === "ALARM" || period.isPast) cardClass = 'status-alarm';

            // 額外任務標示
            let extraBadge = item.isExtraTask
                ? `<span class="badge bg-secondary">其他執行項目</span>`
                : "";

            // === 新增警告檢查邏輯 ===
            if (status === "RUN" && device.wO_ID) {
                if (!item.inspectionList || item.inspectionList.length === 0) {
                    // 沒有巡檢資料 → 警告
                    cardClass = 'status-overtime';
                } else {
                    // 檢查最後一筆
                    const lastRecord = item.inspectionList[0];
              
                    if (lastRecord.inspectWo === device.wO_ID) {
                        // 檢查時間差
                        const now = new Date();
                        // lastRecord.time 格式假設是 "HH:mm - HH:mm" 或 "HH:mm - 檢驗中"
                        let endTimeStr = lastRecord.time.split('-').pop().trim();
                        if (endTimeStr.includes('檢驗中')) {
                            // 還在進行中，不算警告
                        } else {
                            // 拼成完整日期時間 (今天日期 + 時間字串)
                            const dateStr = now.toISOString().split('T')[0]; // yyyy-mm-dd
                            const fullDateTime = new Date(`${dateStr}T${endTimeStr}:00`);

                            const diffMs = now - fullDateTime;
                            const diffHours = diffMs / (1000 * 60 * 60);

                            if (diffHours > 2) {
                                cardClass = 'status-overtime';
                            }
                        }
                    } else {
                        cardClass = 'status-overtime';
                    }
                }
            }

            // 檢驗時間清單
            let inspectionsHtml = "";
            if (item.inspectionList && item.inspectionList.length > 0) {
                inspectionsHtml += `<ul class="inspection-list">`;
                item.inspectionList.forEach(rec => {
                    const progressClass = rec.isInProgress ? "in-progress" : "";
                    inspectionsHtml += `
                        <li class="${progressClass}">
                            <span class="inspect-time">${rec.time}</span>
                            <span class="inspect-inspectWo">${rec.inspectWo}</span>
                            <span class="inspect-inspector">(${rec.inspector})</span>
                            ${rec.isInProgress ? `<span class="badge bg-warning ms-1">進行中</span>` : ""}
                        </li>
                    `;
                });
                inspectionsHtml += `</ul>`;
            } else {
                inspectionsHtml = `<div class="no-inspection">無檢驗紀錄</div>`;
            }

            return `
                <div class="device-card ${cardClass}">
                    <div class="device-info">${extraBadge}</div>
                    <div class="device-header">
                        <div class="device-id">${device.deviceName}</div>
                        <div class="device-status">${status}</div>
                    </div>
                    <div class="device-name">${device.deviceID || '-'}</div>
                    <div class="device-info">工單: ${workOrderNo}</div>
                    <div class="inspection-section">
                        <strong>檢驗紀錄</strong>
                        ${inspectionsHtml}
                    </div>
                </div>
            `;
        }



        function togglePeriod(index) {
            const content = $(`#period-content-${index}`);
            const icon = $(`.time-period[data-period="${index}"] .accordion-icon`);

            if (content.hasClass('expanded')) {
                content.removeClass('expanded');
                icon.removeClass('expanded');
            } else {
                content.addClass('expanded');
                icon.addClass('expanded');
            }
        }

        function showInspectionStartModal(deviceId, arriveTime, isExisting) {
            $('#modalDevice').text(deviceId);
            $('#modalTime').text(`時間: ${arriveTime}`);

            const modal = $('#inspectionModal');
            modal.show();
        }

        function closeInspectionModal() {
            $('#inspectionModal').hide();
        }

        function showLoading(show) {
            $('#loading').toggle(show);
        }

        function showError(message) {
            $('#error').text(message).show();
        }

        function hideError() {
            $('#error').hide();
        }

        // =================== NFC 相關 ======================
        async function initializeNFC() {
            try {
                addNFCLog('初始化NFC功能');

                if ('NDEFReader' in window) {
                    nfcReader = new NDEFReader();
                    isNFCSupported = true;
                    addNFCLog("NFC支援已啟用");
                    showNFCStatus("NFC功能正常", "success");
                    await startNFCReading();
                } else {
                    addNFCLog("瀏覽器不支援NFC");
                    showNFCStatus("瀏覽器不支援NFC", "warning");
                }
            } catch (error) {
                addNFCLog(`NFC錯誤: ${error.message}`);
                showNFCStatus("NFC初始化失敗", "error");
            }
        }

        async function startNFCReading() {
            try {
                await nfcReader.scan();
                addNFCLog("NFC掃描啟動");
                showNFCStatus("NFC掃描中", "info");

                nfcReader.addEventListener("reading", ({ message, nfcId }) => {
                    addNFCLog(`檢測到卡片: ${nfcId}`);
                    handleNFCCard(nfcId, message);
                });

                nfcReader.addEventListener("readingerror", (error) => {
                    addNFCLog(`讀取錯誤: ${error.message}`);
                    showNFCStatus("讀取錯誤", "error");
                });

            } catch (error) {
                addNFCLog(`掃描失敗: ${error.message}`);
                showNFCStatus("NFC掃描失敗", "error");
            }
        }

        // === 刷NFC卡 ===
        function handleNFCCard(nfcId, message) {

            addNFCLog(`處理NFC卡片: ${nfcId}`);

            $.ajax({
                url: '@Url.Action("ProcessNFCInspection", "Inspection")',
                type: 'POST',
                contentType: 'application/json',
                data: JSON.stringify({
                    nfcId: nfcId,
                    source: 'NFC',
                    inspectType: "INJECT_INSPECT"
                }),
                dataType: 'json',
                success: function (response) {

                    if (response.success) {
                        if (response.needConfirmation) {
                            // 需要用戶確認是否替換
                            showReplaceConfirmationModal(response);
                        } else {
                            // 直接成功
                            handleSuccessResponse(response);
                        }
                    } else {
                        // 處理各種錯誤
                        addNFCLog(`處理失敗: ${response.message}`);
                        showNFCStatus(response.message, "error");

                        if (response.errorCode === 'CARD_NOT_FOUND') {
                            alert("此感應卡不存在於資料庫");
                        } else if (response.errorCode === 'NOT_LOGGED_IN') {
                            alert("請先登入系統");
                            window.location.href = '@Url.Action("Login", "Account")';
                        }
                    }
                },
                error: function (xhr, status, error) {
                    addNFCLog(`系統錯誤: ${xhr.status} ${error}`);
                    showNFCStatus('系統錯誤', "error");
                }
            });
        }

        function handleSuccessResponse(response) {
            addNFCLog(`巡檢記錄成功: ${response.deviceId} (ID: ${response.recordId})`);
            showNFCStatus(`${response.deviceId} 記錄成功`, "success");
            showInspectionStartModal(response.deviceId, response.arriveTime, response.isExisting);
            loadTodayInspection();
        }

        function showReplaceConfirmationModal(response) {
            const confirmed = confirm(
                `你在 ${response.pendingDeviceId} 機台還有未完成的巡檢記錄，\n` +
                `確定要在 ${response.newDeviceId} 機台開始新的巡檢嗎？`
            );

            if (confirmed) {
                // 確認替換
                $.ajax({
                    url: '@Url.Action("ProcessNFCInspection", "Inspection")',
                    type: 'POST',
                    contentType: 'application/json',
                    data: JSON.stringify({
                        nfcId: response.nfcId,
                        source: 'NFC',
                        inspectType: "INJECT_INSPECT",
                        confirmReplace: true,
                        oldRecordId: response.pendingRecordId
                    }),
                    dataType: 'json',
                    success: function (confirmResponse) {
                        if (confirmResponse.success) {
                            handleSuccessResponse(confirmResponse);
                        } else {
                            addNFCLog(`替換失敗: ${confirmResponse.message}`);
                            showNFCStatus(`替換失敗: ${confirmResponse.message}`, "error");
                        }
                    },
                    error: function (xhr, status, error) {
                        addNFCLog(`替換錯誤: ${xhr.status} ${error}`);
                        showNFCStatus('替換失敗: 系統錯誤', "error");
                    }
                });
            } else {
                addNFCLog('使用者取消替換巡檢記錄');
                showNFCStatus('已取消新的巡檢記錄', 'info');
            }
        }


        function manualStartNFC() {
            addNFCLog('手動啟動NFC');
            if (isNFCSupported && nfcReader) {
                startNFCReading();
            } else {
                alert('NFC功能不可用');
            }
        }

        function stopNFC() {
            addNFCLog('NFC掃描停止');
            showNFCStatus("掃描已停止", "info");
        }

        function addNFCLog(message, type = 'info') {
            const timestamp = new Date().toLocaleTimeString('zh-TW');
            const logContainer = $('#nfcLog');
            const entry = $('<div class="log-entry"></div>').text(`[${timestamp}] ${message}`);
            logContainer.append(entry);
            logContainer.scrollTop(logContainer[0].scrollHeight);

            const entries = logContainer.find('.log-entry');
            if (entries.length > 20) {
                entries.first().remove();
            }
        }

        function clearNFCLog() {
            $('#nfcLog').empty();
            addNFCLog('日誌已清除');
        }

        function showNFCStatus(message, type) {
            const statusDiv = $('#nfcStatus');
            statusDiv.removeClass('nfc-success nfc-error nfc-warning nfc-info');
            statusDiv.addClass('nfc-' + type);
            statusDiv.text(message).show();

            if (type !== 'error') {
                setTimeout(() => {
                    statusDiv.hide();
                }, 3000);
            }
        }
    </script>
    <script>
                const nfcTestCards = [
            // 射出一區
            { area: '射出一區', deviceId: 'CLF_2200T-01', nfcCardId: '2200T-01' },
            { area: '射出一區', deviceId: 'FCS_1700T-01', nfcCardId: '1700T-01' },
            { area: '射出一區', deviceId: 'FCS_850T-01', nfcCardId: '850T-01' },
            { area: '射出一區', deviceId: 'OR_180T-01', nfcCardId: '180T-01' },
            { area: '射出一區', deviceId: 'OR_180T-02', nfcCardId: '180T-02' },
            { area: '射出一區', deviceId: 'OR_550T-01', nfcCardId: '550T-01' },
            { area: '射出一區', deviceId: 'SUMITOMO_130T-01', nfcCardId: '130T-01' },
            { area: '射出一區', deviceId: 'SUMITOMO_280T-01', nfcCardId: '280T-01' },

            // 射出二區
            { area: '射出二區', deviceId: 'ARBURG_50T-01', nfcCardId: '50T-01' },
            { area: '射出二區', deviceId: 'OR_250T-01', nfcCardId: '250T-01' },
            { area: '射出二區', deviceId: 'OR_250T-02', nfcCardId: '250T-02' },
            { area: '射出二區', deviceId: 'OR_350T-05', nfcCardId: '350T-05' },
            { area: '射出二區', deviceId: 'SUMITOMO_180T-04', nfcCardId: '180T-04' },
            { area: '射出二區', deviceId: 'SUMITOMO_50T-02', nfcCardId: '50T-02' },
            { area: '射出二區', deviceId: 'TOSHIBA_850T-02', nfcCardId: '850T-02' },

            // 射出三區
            { area: '射出三區', deviceId: 'OR_100T-02', nfcCardId: '100T-02' },
            { area: '射出三區', deviceId: 'OR_350T-01', nfcCardId: '350T-01' },
            { area: '射出三區', deviceId: 'OR_350T-02', nfcCardId: '350T-02' },
            { area: '射出三區', deviceId: 'OR_350T-04', nfcCardId: '350T-04' },
            { area: '射出三區', deviceId: 'TOSHIBA_1000T-01', nfcCardId: '1000T-01' },
            { area: '射出三區', deviceId: 'TOSHIBA_1050T-01', nfcCardId: '1050T-01' },
            { area: '射出三區', deviceId: 'TOSHIBA_1050T-02', nfcCardId: '1050T-02' },
            { area: '射出三區', deviceId: 'TOSHIBA_1050T-03', nfcCardId: '1050T-03' },
            { area: '射出三區', deviceId: 'TOSHIBA_550T-02', nfcCardId: '550T-02' },

            // 復興廠
            { area: '復興廠', deviceId: 'FANUC_100T-04', nfcCardId: '100T-04' },
            { area: '復興廠', deviceId: 'FANUC_300T-01', nfcCardId: '300T-01' },
            { area: '復興廠', deviceId: 'FANUC_300T-02', nfcCardId: '300T-02' },
            { area: '復興廠', deviceId: 'FANUC_450T-01', nfcCardId: '450T-01' },
            { area: '復興廠', deviceId: 'TOSHIBA_1050T-04', nfcCardId: '1050T-04' }
        ];

        function showNFCTestModal(userNo) {
            if (userNo !=="G02828") return
            document.getElementById('nfcTestModal').style.display = 'flex';
            generateNFCCardList();
            document.getElementById('nfcSearchInput').focus();
        }

        function closeNFCTestModal() {
            document.getElementById('nfcTestModal').style.display = 'none';
            document.getElementById('nfcSearchInput').value = '';
        }

        function generateNFCCardList(filteredCards = null) {
            const cards = filteredCards || nfcTestCards;
            const listContainer = document.getElementById('nfcCardList');

            if (cards.length === 0) {
                listContainer.innerHTML = '<div style="padding: 20px; text-align: center; color: #666;">找不到符合的卡片</div>';
                return;
            }

            const html = cards.map(card => `
                <div class="nfc-card-item" onclick="selectNFCCard('${card.nfcCardId}', '${card.area}', '${card.deviceId}')"
                     style="padding: 12px 15px; border-bottom: 1px solid #eee; cursor: pointer; transition: background 0.2s;"
                     onmouseover="this.style.background='#f8f9fa'"
                     onmouseout="this.style.background='white'">
                    <div style="font-weight: bold; color: #333; margin-bottom: 4px;">
                        ${card.nfcCardId}
                    </div>
                    <div style="font-size: 13px; color: #666;">
                        ${card.area} - ${card.deviceId}
                    </div>
                </div>
            `).join('');

            listContainer.innerHTML = html;
        }

        function filterNFCCards() {
            const searchTerm = document.getElementById('nfcSearchInput').value.toLowerCase();
            if (!searchTerm) {
                generateNFCCardList();
                return;
            }

            const filteredCards = nfcTestCards.filter(card =>
                card.area.toLowerCase().includes(searchTerm) ||
                card.deviceId.toLowerCase().includes(searchTerm) ||
                card.nfcCardId.toLowerCase().includes(searchTerm)
            );

            generateNFCCardList(filteredCards);
        }

        function selectNFCCard(nfcCardId, area, deviceId) {
            // 確認選擇
            if (confirm(`確定要測試刷取卡片嗎？\n\n卡片ID: ${nfcCardId}\n區域: ${area}\n設備: ${deviceId}`)) {
                closeNFCTestModal();

                // 顯示測試提示
                if (typeof addNFCLog === 'function') {
                    addNFCLog(`🧪 測試模式：模擬刷取 ${nfcCardId}`);
                }
                if (typeof showNFCStatus === 'function') {
                    showNFCStatus(`測試刷取: ${nfcCardId}`, "info");
                }

                // 執行 NFC 處理
                handleNFCCard(nfcCardId, null);
            }
        }

        function testCustomNFC() {
            closeNFCTestModal();
            document.getElementById('customNFCModal').style.display = 'flex';
            document.getElementById('customNFCInput').focus();
        }

        function closeCustomNFCModal() {
            document.getElementById('customNFCModal').style.display = 'none';
            document.getElementById('customNFCInput').value = '';
        }

        function executeCustomNFC() {
            const customNFCId = document.getElementById('customNFCInput').value.trim();

            if (!customNFCId) {
                alert('請輸入 NFC 卡片 ID');
                return;
            }

            closeCustomNFCModal();

            // 顯示測試提示
            if (typeof addNFCLog === 'function') {
                addNFCLog(`🧪 測試模式：模擬刷取自訂卡片 ${customNFCId}`);
            }
            if (typeof showNFCStatus === 'function') {
                showNFCStatus(`測試刷取: ${customNFCId}`, "info");
            }

            // 執行 NFC 處理
            handleNFCCard(customNFCId, null);
        }

        // 鍵盤快捷鍵支援
        document.addEventListener('keydown', function(e) {
            // ESC 鍵關閉 Modal
            if (e.key === 'Escape') {
                if (document.getElementById('customNFCModal').style.display === 'flex') {
                    closeCustomNFCModal();
                } else if (document.getElementById('nfcTestModal').style.display === 'flex') {
                    closeNFCTestModal();
                }
            }

            // Enter 鍵執行自訂 NFC 測試
            if (e.key === 'Enter' && document.getElementById('customNFCModal').style.display === 'flex') {
                executeCustomNFC();
            }
        });

        // 點擊外部區域關閉 Modal
        document.getElementById('nfcTestModal').addEventListener('click', function(e) {
            if (e.target === this) {
                closeNFCTestModal();
            }
        });

        document.getElementById('customNFCModal').addEventListener('click', function(e) {
            if (e.target === this) {
                closeCustomNFCModal();
            }
        });

        // 修改原本的 ready 函數，移除舊的測試邏輯
        $(document).ready(function() {
            updateCurrentTime();
            setInterval(updateCurrentTime, 1000);
            initializeNFC();
            loadTodayInspection();

        });

                function showInspectionStartModal(deviceId, arriveTime, isExisting) {
            $('#modalDevice').text(deviceId);
            $('#modalTime').text(`時間: ${arriveTime}`);

            const modal = $('#inspectionModal');
            modal.addClass('show'); // 使用 flex 置中
        }

        function closeInspectionModal(e) {
            // 如果有 event，確保是點背景才關閉
            if (e && e.target !== e.currentTarget) return;
            $('#inspectionModal').removeClass('show');
        }
    </script>


}