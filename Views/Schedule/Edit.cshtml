@{
    ViewData["Title"] = "排班建立 - MES 巡檢系統";
    Layout = "_Layout";
}

@section css {
    <style>
        /* ==================== 基礎樣式 ==================== */
        .control-panel {
            background: white;
            border-radius: 8px;
            padding: 20px;
            margin-bottom: 20px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }

        .filter-panel {
            border: 1px solid rgba(0,0,0,0.1);
            border-radius: 6px;
            padding: 15px;
            margin-bottom: 15px;
        }

        .filter-result-info {
            background: #d4edda;
            border: 1px solid #c3e6cb;
            padding: 10px;
            border-radius: 4px;
            margin-bottom: 10px;
            font-size: 14px;
        }

        /* ==================== 表格樣式 ==================== */
        .table-container {
            background: white;
            border: 1px solid #000;
            margin-top: 20px;
        }

        #scheduleTable {
            border-collapse: collapse;
            margin: 0;
            font-size: 13px;
            width: 100%;
        }

            #scheduleTable th {
                background-color: #f2f2f2;
                color: #000;
                border: 1px solid #000;
                font-weight: 600;
                text-align: center;
                vertical-align: middle;
                padding: 8px 6px;
                height: 32px;
            }

            #scheduleTable td {
                border: 1px solid #ccc;
                padding: 2px;
                vertical-align: middle;
                height: 28px;
            }

            #scheduleTable tbody tr:hover {
                background-color: #f8f9fa;
            }

            #scheduleTable tbody tr.copied {
                background-color: #d1ecf1;
            }

        .read-only-row td {
            background-color: #f8f9fa !important;
            color: #6c757d;
        }

        /* .read-only-row input, .read-only-row select {
            background-color: transparent !important;
            pointer-events: none;
        } */

        /* ==================== 表格輸入控制項 ==================== */
        #scheduleTable td input, #scheduleTable td select {
            box-sizing: border-box;
            line-height: 1.4;
            border: none;
            background: transparent;
            padding: 4px 6px;
            font-size: 14px;
            width: 100%;
            margin: 0;
            outline: none;
        }

            #scheduleTable td input:focus, #scheduleTable td select:focus {
                background-color: #fff;
                border: 2px solid #0071b2;
                border-radius: 2px;
            }

        .row-checkbox, #selectAll {
            width: 16px;
            height: 16px;
        }

        /* ==================== 自動完成下拉選單 ==================== */
        .user-autocomplete {
            position: relative;
        }

        .autocomplete-dropdown {
            position: absolute;
            width: max-content;
            top: 100%;
            left: 0;
            background: white;
            border: 1px solid #ced4da;
            border-top: none;
            border-radius: 0 0 4px 4px;
            max-height: 150px;
            overflow-y: auto;
            z-index: 1000;
            display: none;
        }

        .autocomplete-item {
            padding: 8px 12px;
            cursor: pointer;
            border-bottom: 1px solid #f8f9fa;
        }

            .autocomplete-item:hover, .autocomplete-item.selected {
                background-color: #0071b2;
                color: white;
            }

        /* ==================== 按鈕和控制項 ==================== */
        .btn-action {
            margin-right: 10px;
            margin-bottom: 5px;
        }

        .copy-controls {
            padding: 15px;
            margin-top: 15px;
            display: none;
            border-top: 1px solid #e9ecef;
        }

        /* ==================== 載入和提示 ==================== */
        .loading {
            display: inline-block;
            width: 16px;
            height: 16px;
            border: 2px solid #f3f3f3;
            border-top: 2px solid #0071b2;
            border-radius: 50%;
            animation: spin 1s linear infinite;
            margin-right: 5px;
        }

        @@keyframes spin {
            0%

        {
            transform: rotate(0deg);
        }

        100% {
            transform: rotate(360deg);
        }

        }

        .alert-custom {
            position: fixed;
            top: 20px;
            right: 20px;
            z-index: 9999;
            min-width: 300px;
            animation: slideIn 0.3s ease-out;
        }

        @@keyframes slideIn {
            from

        {
            transform: translateX(100%);
            opacity: 0;
        }

        to {
            transform: translateX(0);
            opacity: 1;
        }

        }
    </style>
}

<div class="page-header">
    <div class="container">
        <h3>排班建立管理</h3>
    </div>
</div>

<!-- 篩選控制面板 -->
<div class="filter-panel">
    <h6>篩選條件</h6>
    <div class="align-items-end d-flex gap-2">
        <div class="" >
            <label class="form-label">人員搜尋</label>
            <select id="filterUser" class="form-select" style="width:150px">
            </select>
        </div>
        <div class="">
            <label class="form-label">部門搜尋</label>
            <select id="filterDepart" class="form-select" style="width:150px">
            </select>
        </div>
        <div class="">
            <label class="form-label">開始日期</label>
            <input type="date" id="filterStartDate" class="form-control">
        </div>
        <div class="">
            <label class="form-label">結束日期</label>
            <input type="date" id="filterEndDate" class="form-control">
        </div>
        <div class="col-md-3">
            <button onclick="filterSchedules()" class="btn btn-primary btn-action">篩選</button>
            <button onclick="clearFilter()" class="btn btn-secondary btn-action">清除</button>
        </div>
    </div>
</div>

<!-- 篩選結果資訊 -->
<div class="filter-result-info" id="filterInfo" style="display: none;"></div>

<!-- 排班表格 -->
<div class="table-container">
    <table class="table-excel" id="scheduleTable">
        <thead>
            <tr>
                <th width="40"><input type="checkbox" id="selectAll" onchange="toggleSelectAll()"></th>
                <th width="180" onclick="gridInfo()">人員</th>
                <th width="80">區域</th>
                <th width="80">類型</th>
                <th width="120">詳細內容</th>
                <th width="80">開始日期</th>
                <th width="80">開始時間</th>
                <th width="80">結束日期</th>
                <th width="80">結束時間</th>
                @* <th width="60">狀態</th> *@
            </tr>
        </thead>
        <tbody id="scheduleTableBody">
            <!-- 動態生成的排班資料 -->
        </tbody>
    </table>
    <div style="display:flex; justify-content:space-between; align-items:baseline; padding: 10px; border-top: 1px solid #ccc; background: #f8f9fa; font-size: 12px; color: #666;">
        <div>

        </div>
        <div style="display:flex">

        <button onclick="addRow()" class="btn btn-outline-secondary btn-action">新增</button>
        <button onclick="deleteSelected()" class="btn btn-outline-secondary btn-action">刪除</button>
        <button onclick="saveAll()" class="btn btn-outline-secondary btn-action">儲存</button>
        <button onclick="clearAll()" class="btn btn-outline-secondary btn-action">清空</button>
        </div>
    </div>
</div>

<!-- 載入中遮罩 -->
<div id="loadingOverlay" class="position-fixed top-0 start-0 w-100 h-100 d-none" style="background: rgba(0,0,0,0.5); z-index: 9999;">
    <div class="d-flex justify-content-center align-items-center h-100">
        <div class="text-center text-white">
            <div class="loading mb-3" style="width: 40px; height: 40px; border-width: 4px;"></div>
            <h5>處理中...</h5>
        </div>
    </div>
</div>

@section scripts {
    <script>
        // ==================== 全域變數 ====================
        let scheduleData = [];
        let originalScheduleData = [];
        let users = [];
        let areas = [];
        let scheduleDeparts = [];
        let scheduleUsers = [];
        let inspectTypes = [];
        let selectedAutocompleteIndex = -1;
        let currentFilterUser = '';
        let tempIndex = 1

        // ==================== 初始化 ====================
        $(document).ready(function() {
            setDefaultDateRange();
            loadInitialData();
        });

        function setDefaultDateRange() {
            const today = new Date();
            const startOfMonth = new Date(today.getFullYear(), today.getMonth(), 1);
            const endOfMonth = new Date(today.getFullYear(), today.getMonth() + 1, 0);

            document.getElementById('filterStartDate').value = startOfMonth.toISOString().split('T')[0];
            document.getElementById('filterEndDate').value = endOfMonth.toISOString().split('T')[0];
        }


        // 取得全公司人員清單、取得檢驗項目清單、取得區域清單、搜尋選單用的人員清單、部門清單
        function loadInitialData() {
            showLoading(true);
            $.ajax({
                url: '@Url.Action("GetAreasUsersInspectType", "Schedule")',
                type: 'GET',
                success: function (response) {
                    if (response.success) {
                        areas = response.data.areas || [];
                        users = response.data.users || [];
                        scheduleDeparts = response.data.scheduleDeparts || [];
                        scheduleUsers = response.data.scheduleUsers || [];
                        inspectTypes = response.data.inspectTypes || [];
                        populateFilterDepartDropdown();
                        populateFilterUsersDropdown();
                    } else {
                        showAlert('error', '載入基礎資料失敗: ' + response.message);
                    }
                },
                error: function () {
                    showAlert('error', '載入基礎資料時發生錯誤');
                },
                complete: function() {
                    showLoading(false);
                }
            });
        }

         function populateFilterUsersDropdown() {
            const userSelect = document.getElementById('filterUser');
            userSelect.innerHTML = '<option value="">全部</option>';
            scheduleUsers.forEach(user => {
                const option = document.createElement('option');
                option.value = user;
                option.textContent = user;
                userSelect.appendChild(option);
            });
        }



        function populateFilterDepartDropdown() {
            console.log()
            const departSelect = document.getElementById('filterDepart');
            departSelect.innerHTML = '<option value="">全部</option>';
            scheduleDeparts.forEach(depart => {
                const option = document.createElement('option');
                option.value = depart;
                option.textContent = depart;
                departSelect.appendChild(option);
            });
        }

        // ==================== 篩選功能 ====================
        function filterSchedules() {
            const userFilter = document.getElementById('filterUser').value.trim();
            const departFilter = document.getElementById('filterDepart').value.trim();
            const startDate = document.getElementById('filterStartDate').value;
            const endDate = document.getElementById('filterEndDate').value;

            let queryParams = new URLSearchParams();
            queryParams.append('userName', userFilter ? userFilter : "");
            queryParams.append("depart", departFilter ? departFilter : "")
            if (startDate) queryParams.append('startDate', startDate);
            if (endDate)   queryParams.append('endDate', endDate);

            if (!startDate || !endDate){
                alert("請選擇日期")
                return
            } 
            showLoading(true);

            $.ajax({
                url: `@Url.Action("GetSearchSchedules", "Schedule")?${queryParams.toString()}`,
                type: 'GET',
                success: function (response) {
                    if (response.success) {
                        originalScheduleData = response.data || [];
                        currentFilterUser = userFilter;
                        transformAndRenderData();
                        showAlert('success', `找到 ${scheduleData.length} 筆排班資料`);
                    } else {
                        showAlert('error', '篩選失敗: ' + response.message);
                    }
                },
                error: function () {
                    showAlert('error', '篩選時發生系統錯誤');
                },
                complete: function() {
                    showLoading(false);
                }
            });
        }

        function transformAndRenderData() {
            scheduleData = originalScheduleData.map(item => ({
                eventId: item.eventId,
                userNo: item.userNo,
                userName: item.userName,
                departmentName: item.department || '',
                fatherDepartmentName: '',
                eventType: item.eventType,
                eventTypeName: item.eventTypeName || '',
                eventDetail: item.eventDetail,
                startDate: item.startDateTime.split('T')[0],
                startTime: item.startDateTime.split('T')[1].substring(0, 5),
                endDate: item.endDateTime.split('T')[0],
                endTime: item.endDateTime.split('T')[1].substring(0, 5),
                area: item.area,
                isActive: item.isActive,
                isExisting: true
            })).sort((a, b) => {
                const dateA = new Date(a.startDate + 'T' + a.startTime);
                const dateB = new Date(b.startDate + 'T' + b.startTime);
                return dateA - dateB;
            });

            renderTable();
            updateFilterInfo();
        }

        function clearFilter() {
            document.getElementById('filterUser').value = '';
            document.getElementById('filterStartDate').value = '';
            document.getElementById('filterEndDate').value = '';

            scheduleData = [];
            originalScheduleData = [];
            currentFilterUser = '';
            renderTable();
            updateFilterInfo();
            showAlert('info', '已清除篩選條件');
        }

        function updateFilterInfo() {
            const filterInfo = document.getElementById('filterInfo');

            if (scheduleData.length > 0) {
                const userInfo = currentFilterUser ? `人員: ${currentFilterUser}` : '';
                const startDate = document.getElementById('filterStartDate').value;
                const endDate = document.getElementById('filterEndDate').value;
                const dateInfo = (startDate || endDate) ? `日期範圍: ${startDate} ~ ${endDate}` : '';

                filterInfo.innerHTML = `篩選條件 - ${userInfo} ${dateInfo}`;
                filterInfo.style.display = 'block';
            } else {
                filterInfo.style.display = 'none';
            }

        }

        // ==================== 表格渲染 ====================
        function renderTable() {
            const tbody = document.getElementById('scheduleTableBody');
            tbody.innerHTML = '';

            scheduleData.forEach((item, index) => {
                const row = tbody.insertRow();
                const isReadOnly = item.isExisting;

                const kind = item.isExisting ? 'db' : 'temp';
                const key  = item.isExisting ? String(item.eventId) : String(item.tempIndex);

                row.setAttribute('data-kind', kind);
                row.setAttribute('data-key',  key);

                if (isReadOnly) {
                    row.classList.add('read-only-row');
                }

                row.innerHTML = createRowHTML(item, index, isReadOnly);
            });

            // updateFilterInfo();
        }

        function createRowHTML(item, index, isReadOnly) {
            return `
                <td class="text-center">
                    <input type="checkbox" class="row-checkbox">
                </td>
                <td>
                    <div class="user-autocomplete">
                        <input type="text"
                            value="${formatUserCell(item)}"
                            onchange="onUserFieldChange(${index}, this.value)"
                            oninput="handleUserInput(this, ${index})"
                            onfocus="showUserDropdown(this, ${index})"
                            onblur="hideUserDropdown(this, ${index})"
                            onkeydown="handleAutocompleteKeydown(event, this, ${index})"
                            data-row="${index}"
                            data-col="1"
                            class="form-control form-control-sm"
                            placeholder="工號"
                            ${isReadOnly ? 'readonly' : ''}>
                        <div class="autocomplete-dropdown" id="userDropdown_${index}"></div>
                    </div>
                </td>
                <td>
                    <select onchange="updateSchedule(${index}, 'area', this.value)"
                            data-row="${index}" data-col="2"
                            class="form-select form-select-sm"
                            ${isReadOnly ? 'disabled' : ''}>
                        <option value="">選擇</option>
                        ${areas.map(area =>
                            `<option value="${area}" ${item.area == area ? 'selected' : ''}>${area}</option>`
                        ).join('')}
                    </select>
                </td>
                <td>
                    <select onchange="updateSchedule(${index}, 'eventType', this.value)"
                            data-row="${index}" data-col="3"
                            class="form-select form-select-sm"
                            ${isReadOnly ? 'disabled' : ''}>
                        ${inspectTypes.map(type =>
                            `<option value="${type.eventType}" ${item.eventType === type.eventType ? 'selected' : ''}>${type.eventTypeName}</option>`
                        ).join('')}
                    </select>
                </td>
                <td>
                    <input type="text"
                           value="${escapeHtml(item.eventDetail)}"
                           onchange="updateSchedule(${index}, 'eventDetail', this.value)"
                           data-row="${index}" data-col="4"
                           class="form-control form-control-sm"
                           placeholder="詳細內容"
                           ${isReadOnly ? 'readonly' : ''}>
                </td>
                <td>
                    <input type="date"
                           value="${item.startDate}"
                           onchange="updateSchedule(${index}, 'startDate', this.value)"
                           data-row="${index}" data-col="5"
                           class="form-control form-control-sm"
                           ${isReadOnly ? 'readonly' : ''}>
                </td>
                <td>
                    <input type="time"
                           value="${item.startTime}"
                           onchange="updateSchedule(${index}, 'startTime', this.value)"
                           data-row="${index}" data-col="6"
                           step="3600"
                           class="form-control form-control-sm"
                           ${isReadOnly ? 'readonly' : ''}>
                </td>
                <td>
                    <input type="date"
                           value="${item.endDate}"
                           onchange="updateSchedule(${index}, 'endDate', this.value)"
                           data-row="${index}" data-col="7"
                           class="form-control form-control-sm"
                           ${isReadOnly ? 'readonly' : ''}>
                </td>
                <td>
                    <input type="time"
                           value="${item.endTime}"
                           onchange="updateSchedule(${index}, 'endTime', this.value)"
                           data-row="${index}" data-col="8"
                           step="3600"
                           class="form-control form-control-sm"
                           ${isReadOnly ? 'readonly' : ''}>
                </td>
                <!--<td class="text-center">
                    <select onchange="updateSchedule(${index}, 'isActive', this.value === 'true')"
                            data-row="${index}" data-col="9"
                            class="form-select form-select-sm"
                            ${isReadOnly ? 'disabled' : ''}>
                        <option value="true" ${item.isActive ? 'selected' : ''}>啟用</option>
                        <option value="false" ${!item.isActive ? 'selected' : ''}>停用</option>
                    </select>
                </td>--!>
            `;
        }

        // ==================== 使用者自動完成 ====================
        const debounce = (fn, wait = 200) => {
            let t;
            return (...args) => {
                clearTimeout(t);
                t = setTimeout(() => fn(...args), wait);
            };
        };

        const debouncedUserInput = debounce((input, idx) => showUserSuggestions(input, idx, input.value), 200);

        function handleUserInput(input, rowIndex) {
            const v = input.value.trim();
            if (v.length >= 1) {
                debouncedUserInput(input, rowIndex);
            } else {
                hideUserDropdown(input, rowIndex);
            }
        }

        function formatUserCell(item) {
            if (!item?.userNo) return '';
            const name = item.userName ?? '';
            const dept = item.departmentName ?? '';
            return escapeHtml([item.userNo, name, dept].filter(Boolean).join('-'));
        }

        function parseUserInput(str) {
            if (!str) return { userNo: '', userName: '' };
            const parts = str.split('-').map(s => s.trim()).filter(Boolean);
            return {
                userNo: parts[0] ?? '',
                userName: parts[1] ?? ''
            };
        }

        function onUserFieldChange(rowIndex, raw) {
            const { userNo, userName } = parseUserInput(raw);

            if (!userNo) {
                ['userNo', 'userName', 'departmentName', 'fatherDepartmentName'].forEach(field =>
                    updateSchedule(rowIndex, field, '')
                );
                renderTable();
                return;
            }

            const u = users.find(x => x.userNo.toLowerCase() === userNo.toLowerCase());

            if (u) {
                updateSchedule(rowIndex, 'userNo', u.userNo);
                updateSchedule(rowIndex, 'userName', u.userName);
                updateSchedule(rowIndex, 'departmentName', u.departmentName);
                updateSchedule(rowIndex, 'fatherDepartmentName', u.fatherDepartmentName);
            } else {
                updateSchedule(rowIndex, 'userNo', userNo);
                updateSchedule(rowIndex, 'userName', userName || '');
                updateSchedule(rowIndex, 'departmentName', '');
                updateSchedule(rowIndex, 'fatherDepartmentName', '');
            }

            renderTable();
        }

        function showUserSuggestions(input, rowIndex, searchValue) {
            const dropdown = document.getElementById(`userDropdown_${rowIndex}`);
            if (!dropdown) return;

            const kw = searchValue.toLowerCase();
            const filteredUsers = users.filter(user =>
                String(user.userNo || '').toLowerCase().includes(kw) ||
                String(user.userName || '').toLowerCase().includes(kw) ||
                String(user.departmentName || '').toLowerCase().includes(kw)
            ).slice(0, 10);

            if (filteredUsers.length > 0) {
                dropdown.innerHTML = filteredUsers.map((user, i) =>
                    `<div class="autocomplete-item"
                          onclick="selectUser(${rowIndex}, '${user.userNo}')"
                          data-index="${i}">
                        ${user.userNo}-${user.userName}-${user.departmentName ?? ''}
                     </div>`
                ).join('');
                dropdown.style.display = 'block';
                selectedAutocompleteIndex = -1;
            } else {
                dropdown.style.display = 'none';
            }
        }

        function selectUser(rowIndex, userNo) {
            const u = users.find(user => user.userNo === userNo);
            if (!u) return;

            updateSchedule(rowIndex, 'userNo', u.userNo);
            updateSchedule(rowIndex, 'userName', u.userName);
            updateSchedule(rowIndex, 'departmentName', u.departmentName);
            updateSchedule(rowIndex, 'fatherDepartmentName', u.fatherDepartmentName);
            renderTable();
        }

        function handleAutocompleteKeydown(event, input, rowIndex) {
            const dropdown = document.getElementById(`userDropdown_${rowIndex}`);
            if (!dropdown || dropdown.style.display === 'none') return;

            const items = dropdown.querySelectorAll('.autocomplete-item');

            if (event.key === 'ArrowDown') {
                event.preventDefault();
                selectedAutocompleteIndex = Math.min(selectedAutocompleteIndex + 1, items.length - 1);
                updateAutocompleteSelection(items);
            } else if (event.key === 'ArrowUp') {
                event.preventDefault();
                selectedAutocompleteIndex = Math.max(selectedAutocompleteIndex - 1, -1);
                updateAutocompleteSelection(items);
            } else if ((event.key === 'Enter' || event.key === "Tab") && selectedAutocompleteIndex >= 0) {
                event.preventDefault();
                items[selectedAutocompleteIndex].click();
            } else if (event.key === 'Escape') {
                dropdown.style.display = 'none';
                selectedAutocompleteIndex = -1;
            }
        }

        function updateAutocompleteSelection(items) {
            items.forEach((item, index) => {
                item.classList.toggle('selected', index === selectedAutocompleteIndex);
            });
        }

        function showUserDropdown(input, rowIndex) {
            setTimeout(() => showUserSuggestions(input, rowIndex, input.value), 100);
        }

        function hideUserDropdown(input, rowIndex) {
            setTimeout(() => {
                const dropdown = document.getElementById(`userDropdown_${rowIndex}`);
                if (dropdown) {
                    dropdown.style.display = 'none';
                    selectedAutocompleteIndex = -1;
                }
            }, 200);
        }

        // ==================== 資料操作 ====================
        function updateSchedule(index, field, value) {
            if (scheduleData[index]) {
                scheduleData[index][field] = value;

                if (field === 'eventType') {
                    const selectType = inspectTypes.find(t => t.eventType === value);
                    scheduleData[index].eventTypeName = selectType ? (selectType.eventTypeName || '') : '';
                }

                if (field === 'startDate' && !scheduleData[index].endDate) {
                    scheduleData[index].endDate = value;
                    renderTable();
                }
            }
        }

        function addRow() {
            const today = new Date().toISOString().split('T')[0];
            const eventType = inspectTypes.length > 0 ? inspectTypes[0].eventType : '';
            const eventTypeName = eventType ?
                (inspectTypes.find(t => t.eventType === eventType)?.eventTypeName || '') : '';

            scheduleData.push({
                tempIndex : tempIndex,
                userNo: '',
                userName: '',
                departmentName: '',
                fatherDepartmentName: '',
                eventType: eventType,
                eventTypeName: eventTypeName,
                eventDetail: '',
                startDate: today,
                startTime: '08:00',
                endDate: today,
                endTime: '17:00',
                area: '',
                isExisting: false
            });
            tempIndex ++;
            renderTable();
        }

        function gridInfo(){
            const checkboxes = document.querySelectorAll('.row-checkbox:checked');
            console.log({checkboxes})
        }

        function deleteSelected() {
            const checkboxes = Array.from(document.querySelectorAll('.row-checkbox:checked'));
            if (checkboxes.length === 0) {
                showAlert('warning', '請先選取要刪除的項目');
                return;
            }

            if (!confirm(`確定要刪除選取的 ${checkboxes.length} 項排班嗎？`)) {
                return;
            }

            const dbIds = [];
            const tempKeys = [];

            checkboxes.forEach(cb => {

                const tr = cb.closest("tr")
                const kind = tr.getAttribute("data-kind");
                const key = tr.getAttribute("data-key");

                if (kind === "db"){
                    dbIds.push(key);
                }else{ tempKeys.push(key)}
            })

            if (dbIds.length>0){
                $.ajax({
                    url: '@Url.Action("DeleteSchedules", "Schedule")',
                    type: 'POST',
                    contentType: 'application/json; charset=utf-8',
                    data: JSON.stringify(dbIds),
                    dataType: 'json',
                    success: function (response) {
                        if (response.success) {
                            showAlert('success', response.message);

                        document.getElementById('selectAll').checked = false;
                        showAlert('success', `成功刪除 ${dbIds.length} 項排班`);
                        } else {
                            showAlert('error', '儲存失敗: ' + response.message);
                        }
                    },
                    error: function () {
                        showAlert('error', '儲存時發生系統錯誤');
                    },
                    complete: function() {
                        showLoading(false);
                    }
                });
            }

            console.log("scheduleData",JSON.stringify(scheduleData))

            scheduleData = scheduleData.filter(item => {
                console.log({item})
                if (item.isExisting){
                    console.log("!dbIds.includes(String(item.eventId))", !dbIds.includes(String(item.eventId)))
                    return !dbIds.includes(String(item.eventId))
                }
                else {
                    console.log("!!tempKeys.includes(String(item.tempIndex))", !tempKeys.includes(String(item.tempIndex)))
                    return !tempKeys.includes(String(item.tempIndex))
                }
            })
            console.log("scheduleData",JSON.stringify(scheduleData))
            renderTable()
            showLoading(false);
        }

        function saveAll() {
            if (scheduleData.length === 0) {
                showAlert('warning', '沒有資料可以儲存');
                return;
            }

            const newSchedules = scheduleData.filter(item => !item.isExisting);
            if (newSchedules.length === 0) {
                showAlert('info', '沒有新的排班資料需要儲存');
                return;
            }

            const invalidRows = validateScheduleData(newSchedules);
            if (invalidRows.length > 0) {
                showAlert('error', `第 ${invalidRows.join(', ')} 列資料不完整，請檢查`);
                return;
            }

            showLoading(true);

            const saveData = newSchedules.map(item => ({
                UserNo: item.userNo,
                UserName: item.userName,
                DepartmentName: item.departmentName,
                FatherDepartmentName: item.fatherDepartmentName,
                EventType: item.eventType,
                EventTypeName: item.eventTypeName,
                EventDetail: item.eventDetail,
                StartDateTime: `${item.startDate}T${item.startTime}:00`,
                EndDateTime: `${item.endDate}T${item.endTime}:00`,
                Area: item.area,
                IsActive: item.isActive
            }));

            $.ajax({
                url: '@Url.Action("SaveSchedules", "Schedule")',
                type: 'POST',
                contentType: 'application/json; charset=utf-8',
                data: JSON.stringify(saveData),
                dataType: 'json',
                success: function (response) {
                    if (response.success) {
                        showAlert('success', response.message);
                        if (currentFilterUser) {
                            filterSchedules();
                        }
                    } else {
                        showAlert('error', '儲存失敗: ' + response.message);
                    }
                },
                error: function () {
                    showAlert('error', '儲存時發生系統錯誤');
                },
                complete: function() {
                    showLoading(false);
                }
            });
        }

        function clearAll() {
            if (scheduleData.length === 0) {
                showAlert('info', '目前沒有資料');
                return;
            }

            if (confirm(`確定要清空所有 ${scheduleData.length} 筆排班資料嗎？`)) {
                scheduleData = [];
                renderTable();
                document.getElementById('selectAll').checked = false;
                showAlert('success', '已清空所有排班資料');
            }
        }

        function validateScheduleData(schedules) {
            const invalidRows = [];
            schedules.forEach((item, index) => {
                if (!item.userNo || !item.userName || !item.startDate || !item.area) {
                    const originalIndex = scheduleData.findIndex(s => s === item);
                    invalidRows.push(originalIndex + 1);
                }

                const start = new Date(`${item.startDate}T${item.startTime}:00`);
                const end = new Date(`${item.endDate}T${item.endTime}:00`);
                if (end <= start) {
                    const originalIndex = scheduleData.findIndex(s => s === item);
                    invalidRows.push(originalIndex + 1);
                }
            });
            return [...new Set(invalidRows)];
        }


        // ==================== 選擇框控制 ====================
        function toggleSelectAll() {
            const selectAll = document.getElementById('selectAll');
            const checkboxes = document.querySelectorAll('.row-checkbox:not([disabled])');
            checkboxes.forEach(checkbox => {
                checkbox.checked = selectAll.checked;
            });
        }

        document.addEventListener('change', (e) => {
            if (e.target.classList?.contains('row-checkbox')) {
                const boxes = Array.from(document.querySelectorAll('.row-checkbox:not([disabled])'));
                const allChecked = boxes.length > 0 && boxes.every(cb => cb.checked);
                document.getElementById('selectAll').checked = allChecked;
            }
        });

        // ==================== 篩選使用者自動完成 ====================
        document.getElementById('filterUser').addEventListener('input', function() {
            handleFilterUserInput(this);
        });

        function handleFilterUserInput(input) {
            const value = input.value.trim();
            if (value.length >= 1) {
                showFilterUserSuggestions(input, value);
            } else {
                hideFilterUserDropdown();
            }
        }

        function showFilterUserSuggestions(input, searchValue) {
            const dropdown = document.getElementById('filterUserDropdown');
            if (!dropdown) return;

            const kw = searchValue.toLowerCase();
            const filteredUsers = users.filter(user =>
                String(user.userNo || '').toLowerCase().includes(kw) ||
                String(user.userName || '').toLowerCase().includes(kw) ||
                String(user.departmentName || '').toLowerCase().includes(kw)
            ).slice(0, 10);

            if (filteredUsers.length > 0) {
                dropdown.innerHTML = filteredUsers.map(user =>
                    `<div class="autocomplete-item" onclick="selectFilterUser('${user.userNo}')">
                        ${user.userNo}-${user.userName}-${user.departmentName ?? ''}
                     </div>`
                ).join('');
                dropdown.style.display = 'block';
            } else {
                dropdown.style.display = 'none';
            }
        }

        function selectFilterUser(userNo) {
            document.getElementById('filterUser').value = userNo;
            hideFilterUserDropdown();
        }

        function hideFilterUserDropdown() {
            const dropdown = document.getElementById('filterUserDropdown');
            if (dropdown) {
                dropdown.style.display = 'none';
            }
        }

        // ==================== 事件監聽和工具函數 ====================
        document.addEventListener('click', function(e) {
            if (!e.target.closest('.user-autocomplete')) {
                document.querySelectorAll('.autocomplete-dropdown').forEach(dropdown => {
                    dropdown.style.display = 'none';
                });
                selectedAutocompleteIndex = -1;
            }
        });

        function showLoading(show) {
            const overlay = document.getElementById('loadingOverlay');
            overlay.classList.toggle('d-none', !show);
        }

        function showAlert(type, message) {
            const existingAlert = document.querySelector('.alert-custom');
            if (existingAlert) {
                existingAlert.remove();
            }

            const alertDiv = document.createElement('div');
            alertDiv.className = `alert alert-${type === 'error' ? 'danger' : type} alert-dismissible fade show alert-custom`;
            alertDiv.innerHTML = `
                ${message}
                <button type="button" class="btn-close" onclick="this.parentElement.remove()"></button>
            `;

            document.body.appendChild(alertDiv);

            setTimeout(() => {
                if (alertDiv.parentElement) {
                    alertDiv.remove();
                }
            }, 3000);
        }

        function escapeHtml(s) {
            return String(s ?? '')
                .replace(/&/g, '&amp;')
                .replace(/</g, '&lt;')
                .replace(/>/g, '&gt;')
                .replace(/"/g, '&quot;')
                .replace(/'/g, '&#039;');
        }
    </script>

    <script>
               // ==================== 複製功能 ====================
        // function toggleeditMode() {
        //     editMode = !editMode;
        //     const copyBtn = document.getElementById('editModeBtn');
        //     const copyControls = document.getElementById('copyControls');

        //     if (editMode) {
        //         copyBtn.innerHTML = '退出編輯';
        //         copyBtn.classList.remove('btn-outline-secondary');
        //         copyBtn.classList.add('btn-secondary');
        //         copyControls.style.display = 'block';
        //         showAlert('info', '已進入複製模式，勾選要複製的排班項目');
        //     } else {
        //         copyBtn.innerHTML = '複製模式';
        //         copyBtn.classList.remove('btn-secondary');
        //         copyBtn.classList.add('btn-outline-secondary');
        //         copyControls.style.display = 'none';
        //         document.querySelectorAll('.row-checkbox').forEach(cb => cb.checked = false);
        //         document.getElementById('selectAll').checked = false;
        //         showAlert('info', '已退出複製模式');
        //     }

        //     renderTable();
        // }

        // function executeCopy() {
        //     const checkboxes = document.querySelectorAll('.row-checkbox:checked');
        //     if (checkboxes.length === 0) {
        //         showAlert('warning', '請先選取要複製的項目');
        //         return;
        //     }

        //     const copySettings = getCopySettings();
        //     if (!validateCopySettings(copySettings)) {
        //         showAlert('warning', '請至少設定一個複製參數');
        //         return;
        //     }

        //     let copiedCount = 0;
        //     checkboxes.forEach(checkbox => {
        //         const row = checkbox.closest('tr').rowIndex - 1;
        //         const originalItem = scheduleData[row];
        //         const copiedItem = applyCopySettings(originalItem, copySettings);
        //         scheduleData.push(copiedItem);
        //         copiedCount++;
        //     });

        //     scheduleData.sort((a, b) => {
        //         const dateA = new Date(a.startDate + 'T' + a.startTime);
        //         const dateB = new Date(b.startDate + 'T' + b.startTime);
        //         return dateA - dateB;
        //     });

        //     renderTable();
        //     clearCopySelections();
        //     showAlert('success', `成功複製 ${copiedCount} 筆排班`);
        // }

        // function getCopySettings() {
        //     return {
        //         targetUser: document.getElementById('copyTargetUser').value.trim(),
        //         targetName: document.getElementById('copyTargetName').value.trim(),
        //         dayOffset: parseInt(document.getElementById('copyDayOffset').value) || 0,
        //         timeOffset: parseInt(document.getElementById('copyTimeOffset').value) || 0,
        //         targetArea: document.getElementById('copyTargetArea').value
        //     };
        // }

        // function validateCopySettings(settings) {
        //     return settings.targetUser || settings.targetName || settings.dayOffset !== 0 ||
        //            settings.timeOffset !== 0 || settings.targetArea;
        // }

        // function applyCopySettings(originalItem, settings) {
        //     const copiedItem = { ...originalItem };
        //     delete copiedItem.eventId;
        //     copiedItem.isExisting = false;

        //     if (settings.targetUser) copiedItem.userNo = settings.targetUser;
        //     if (settings.targetName) copiedItem.userName = settings.targetName;
        //     if (settings.targetArea) copiedItem.area = settings.targetArea;

        //     if (settings.dayOffset !== 0) {
        //         const startDate = new Date(copiedItem.startDate);
        //         const endDate = new Date(copiedItem.endDate);
        //         startDate.setDate(startDate.getDate() + settings.dayOffset);
        //         endDate.setDate(endDate.getDate() + settings.dayOffset);
        //         copiedItem.startDate = startDate.toISOString().split('T')[0];
        //         copiedItem.endDate = endDate.toISOString().split('T')[0];
        //     }

        //     if (settings.timeOffset !== 0) {
        //         const startTime = timeStringToMinutes(copiedItem.startTime) + (settings.timeOffset * 60);
        //         const endTime = timeStringToMinutes(copiedItem.endTime) + (settings.timeOffset * 60);
        //         copiedItem.startTime = minutesToTimeString(startTime);
        //         copiedItem.endTime = minutesToTimeString(endTime);

        //         const s = new Date(`${copiedItem.startDate}T${copiedItem.startTime}:00`);
        //         const e = new Date(`${copiedItem.endDate}T${copiedItem.endTime}:00`);
        //         if (e <= s) {
        //             const e2 = new Date(s.getTime() + 60*60*1000);
        //             copiedItem.endDate = e2.toISOString().split('T')[0];
        //             copiedItem.endTime = minutesToTimeString(e2.getHours()*60 + e2.getMinutes());
        //         }
        //     }

        //     return copiedItem;
        // }

        // function clearCopySelections() {
        //     document.querySelectorAll('.row-checkbox').forEach(cb => cb.checked = false);
        //     document.getElementById('selectAll').checked = false;
        // }

        // function timeStringToMinutes(timeStr) {
        //     const [hours, minutes] = timeStr.split(':').map(Number);
        //     return hours * 60 + minutes;
        // }

        // function minutesToTimeString(totalMinutes) {
        //     totalMinutes = ((totalMinutes % (24 * 60)) + (24 * 60)) % (24 * 60);
        //     const hours = Math.floor(totalMinutes / 60);
        //     const minutes = totalMinutes % 60;
        //     return `${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}`;
        // }

        // ==================== 鍵盤導航 ====================
        // document.addEventListener('keydown', function(e) {
        //     const el = e.target;
        //     if (!el.dataset.row || !el.dataset.col) return;

        //     const row = parseInt(el.dataset.row);
        //     const col = parseInt(el.dataset.col);

        //     if (e.key === 'Enter' && !el.classList.contains('autocomplete-active')) {
        //         e.preventDefault();
        //         navigateToNextCell(row, col);
        //     } else if (e.key === 'ArrowDown' && !el.classList.contains('autocomplete-active')) {
        //         e.preventDefault();
        //         navigateToCell(row + 1, col);
        //     } else if (e.key === 'ArrowUp' && !el.classList.contains('autocomplete-active')) {
        //         e.preventDefault();
        //         navigateToCell(row - 1, col);
        //     }
        // });

        // function navigateToNextCell(row, col) {
        //     let nextCol = col + 1;
        //     let nextRow = row;

        //     const maxCol = getMaxColumnInRow(row);
        //     if (nextCol > maxCol) {
        //         nextCol = 1;
        //         nextRow = row + 1;
        //         if (nextRow >= scheduleData.length) {
        //             addRow();
        //             return;
        //         }
        //     }

        //     navigateToCell(nextRow, nextCol);
        // }

        // function navigateToCell(row, col) {
        //     const element = document.querySelector(`[data-row="${row}"][data-col="${col}"]`);
        //     if (element && !element.disabled && !element.readOnly) {
        //         element.focus();
        //     }
        // }

        // function getMaxColumnInRow(rowIdx) {
        //     const elements = document.querySelectorAll(`[data-row="${rowIdx}"][data-col]`);
        //     return Math.max(...Array.from(elements).map(e => Number(e.dataset.col)));
        // }

    </script>

}